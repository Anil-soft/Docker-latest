🛠 Docker Volumes - A Complete Guide
🔍 Introduction to Docker Volumes
Docker volumes are the preferred method for persisting data in Docker containers. Since containers are ephemeral, any data stored inside them is lost when the container is removed. Volumes allow data to persist beyond the lifecycle of a container.

🔧 Types of Docker Volumes

📊 Anonymous Volumes
✅ Created automatically when a volume is needed but not explicitly named.
✅ Used when you don't need to reference the volume from multiple containers.
Example:
  docker run -d --rm -v /app/data ubuntu

📅 Named Volumes
✅ Persist even after the container is removed and can be referenced by multiple containers.
✅ Stored in Docker’s managed volume directory.
Example:
  docker volume create my_volume
  docker run -d --name my_container -v my_volume:/app/data ubuntu

📁 Bind Mounts
✅ Directly maps a file or directory from the host machine to a container.
✅ More flexible but tightly coupled with the host system.
Example:
    docker run -d -v /host/data:/container/data ubuntu

📝 Docker Volume Lifecycle
🔧 Create a Volume
      docker volume create my_volume
🛠 Inspect a Volume
      docker volume inspect my_volume
📋 List Volumes
      docker volume ls
📦 Use a Volume in a Container
      docker run -d -v my_volume:/app/data ubuntu
🗑 Remove a Volume
      docker volume rm my_volume
💡 Remove All Unused Volumes
      docker volume prune

🛡 Real-World Use Cases
💪 Sharing Data Between Containers
Scenario: An NGINX server and an application container need to share files.
  Solution:
  docker volume create shared_data
  docker run -d --name app -v shared_data:/app ubuntu
  docker run -d --name nginx -v shared_data:/usr/share/nginx/html -p 8080:80 nginx

💻 Using Bind Mounts for Local Development
Scenario: Developers want changes made on the host to reflect in the container in real time.
    Solution:
    docker run -d -v $(pwd):/usr/src/app node
  
✅ Regularly clean up unused volumes using docker volume prune.
